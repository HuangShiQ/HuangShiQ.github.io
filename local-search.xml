<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ultrasound_Transmit_coded</title>
    <link href="/2022/07/02/ultrasound-Transmit-coded/"/>
    <url>/2022/07/02/ultrasound-Transmit-coded/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超声DMAS波束合成（delay-multiply-and-sum ,DMAS）仿真</title>
    <link href="/2022/06/12/ultrasound-dmas/"/>
    <url>/2022/06/12/ultrasound-dmas/</url>
    
    <content type="html"><![CDATA[<h1 id="超声DMAS波束合成（delay-multiply-and-sum-DMAS）仿真"><a href="#超声DMAS波束合成（delay-multiply-and-sum-DMAS）仿真" class="headerlink" title="超声DMAS波束合成（delay-multiply-and-sum ,DMAS）仿真"></a>超声DMAS波束合成（delay-multiply-and-sum ,DMAS）仿真</h1><p>​        与传统的延迟叠加求和 (DAS) 波束形成相比，延迟相乘叠加求和 (<a href="https://ieeexplore.ieee.org/document/6960091">DMAS</a>) 成像通过通道的乘法耦合来实现接收孔径的空间相干性，以提高图像分辨率和对比度。公式为：</p><p>​        $s_{ij}(t)&#x3D;sign(s_i(t)*s_j(t))*\sqrt{|s_i(t)*s_j(t)|}$</p><p>​$y_{F-DMAS} &#x3D; (\sum_{i&#x3D;0}^{N-1}\sum_{j&#x3D;i}^{N}s_{ij}(t))_f$</p><p>​       $i$ 、$j$代表相应延迟后数据，$f$代表带通滤波器</p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/dmas/DMAS_SCH.png" style="zoom:80%;" /><p>​       上图为DMAS波束合成步骤，具体包括四步：</p><ol><li><p>获取延时后通道数据</p></li><li><p>计算$s_{ij}(t)$</p></li><li><p>计算$DMAS$</p></li><li><p>对$DMAS$滤波</p><p>在第四步进行了滤波，是由于DMAS波束合成在相乘后产生了零频及二次谐波，我们通过下面的仿真信号进行说明，仿真的信号为采样率60，频率10的正弦信号。</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/dmas/simulation.png"></p><p>最上方从左到右分别为仿真信号及其频谱，左下角为DMAS后信号频谱，可以看出DMAS产生了零频及二次谐波，因此需要一个bandbass滤波器，右下角为DMAS滤波后频谱。</p><h2 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h2><p>Field II仿真：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/dmas/linear_fcous_wave_DAS.png"></p></li></ol><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/dmas/linear_fcous_wave_DMAS.png"></p><p>​       CIRS仿体结果：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/dmas/DAS.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/dmas/DMAS_1.png"></p><p>从Field II靶点结果看出DMAS的空间分辨率有所提升，CIRS结果看对比度有所提升，但整幅图像给人一种空洞的感觉，在实际使用过程中可以通过校正系数去修正其对比度。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超声系统发射变迹仿真（Ultrasound Emit apodization Simulation）</title>
    <link href="/2022/05/21/ultrasound-transmit-apod/"/>
    <url>/2022/05/21/ultrasound-transmit-apod/</url>
    
    <content type="html"><![CDATA[<h1 id="超声系统发射变迹仿真（Ultrasound-Emit-apodization-Simulation）"><a href="#超声系统发射变迹仿真（Ultrasound-Emit-apodization-Simulation）" class="headerlink" title="超声系统发射变迹仿真（Ultrasound Emit apodization Simulation）"></a>超声系统发射变迹仿真（Ultrasound Emit apodization Simulation）</h1><p>​        变迹在超声前端是超声系统的一个重要模块，用于对孔径信号加权，变迹可以有效降低旁瓣，提升对比分辨率。变迹分为发射变迹和接收变迹，接收变迹实现简单，可以在FPGA或软件中实现，这里不做描述。发射变迹实现有两种方法，一种是通过控制电流或电压的幅值进行实现，实现成本高，对于中低端系统来说不值得使用这种方法；另一种是通过控制发射波形的占空比进行实现，实现简单。</p><p>​       本文仿真改变占空比实现发射变迹的方式，此处以Field II软件进行线阵发射变迹仿真。</p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>1、2.5个发射周期</p><p>2、矩形窗即无发射变迹</p><p>3、hamming窗发射变迹</p><p>其他参数与前面文章中配置相同</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>1、不同阵元位置的发射波形</p><p>​       矩形窗：</p><p>​                                                                                              <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/transmitapod/orbit_movie.gif" style="zoom:80%;" /></p><p>​      hamming窗：</p><p>​                                                                                               <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/transmitapod/orbit_movie_apod.gif" style="zoom:80%;" /></p><p>2、发射声场</p><p>​      矩形窗：</p><p>​      </p><p>​                                                                          <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/transmitapod/linear_0_emit_field.png"></p><p>​      hamming窗：</p><p>​                                                                          <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/transmitapod/linear_1_emit_field.png"></p><p>从发射声场看，hamming窗中间能量比无变迹窗能量强，hamming窗两侧抑制也较强</p><p>3、波束合成后结果</p><p>​      矩形窗：</p><p>​                                                                        <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/transmitapod/linear_fcous_wave_0feipianzhuan.png"></p><p>​      hamming窗： </p><p>​                                                                       <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/transmitapod/linear_fcous_wave_feipianzhuan.png">                 </p><p>从波束合成结果看，聚焦处靶点在有发射变迹比无变迹旁瓣伪像明显减少</p><p>​     使用第一种方式实现：</p><p>​                                                                      <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/transmitapod/linear_fcous_wave_11feipianzhuan.png"></p><p>从波束合成结果看，第一种和第二种实现方式结果基本一致。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        变迹可以有效降低旁瓣，提升对比分辨率，通过占空比改变发射波形的发射变迹结果与幅度变迹效果基本相差不大。对于变迹中的<a href="https://en.wikipedia.org/wiki/Window_function">窗函数</a>可以有多种选择，具体可以根据实际效果进行配置</p><p>​                                                   </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超声广义相干因子（ Generalized Coherence Factor,GCF）波束合成仿真</title>
    <link href="/2022/05/15/ultrasound-gcf/"/>
    <url>/2022/05/15/ultrasound-gcf/</url>
    
    <content type="html"><![CDATA[<h1 id="超声广义相干因子（-Generalized-Coherence-Factor-GCF）波束合成仿真"><a href="#超声广义相干因子（-Generalized-Coherence-Factor-GCF）波束合成仿真" class="headerlink" title="超声广义相干因子（ Generalized Coherence Factor,GCF）波束合成仿真"></a>超声广义相干因子（ Generalized Coherence Factor,GCF）波束合成仿真</h1><p>​       声速不均匀会降低图像的空间分辨率和对比度分辨率，广义相干因子(Generalized Coherence Factor,GCF)是由<a href="https://ieeexplore.ieee.org/document/1182117">Pai-Chi Li</a>教授提出的一种能够校正声速不均性引起的聚焦误差方法。</p><p>​        $GCF &#x3D; \sum_{-M_0&lt;i&lt;M_0}{|p(i)|^2}&#x2F;\sum_{i&#x3D;0}^{N-1}{|p(i)|^2}$</p><p>​       上面就是$GCF$计算公式，分子为低频分量，代表接收通道数据的相干成分，分母为所有频率成分能量,$p$为延时后的通道数据频谱。</p><p>最终波束合成后的数据为：</p><p>​$p(i) &#x3D; GCF*sum_{i&#x3D;0}^{N-1}{s(i)}$</p><p>​$s$为延时后的通道数据。</p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/gcf/gcf.png"  /><p>​        上图为GCF波束合成步骤，具体包括四步：</p><ol><li><p>获取延时后通道数据</p></li><li><p>计算每个点的FFT，获取频谱</p></li><li><p>根据公式计算GCF</p></li><li><p>获取校正后波束合成数据</p></li></ol><h2 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h2><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/gcf/linear_fcous_wave_das.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/gcf/linear_fcous_wave_GCF.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/gcf/NORMAL.bmp"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/gcf/gcf.bmp"></p><p>M0  &#x3D; 0时，</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/gcf/gcf_0.bmp"></p><p>从上图Field II靶点结果看变化并不明显，从CIRS仿体上看对比分辨率以及空间分辨率有所提升，但整幅图像给人一种空洞的感觉，尤其是近场信号被压下去很多，对此可以在近场提高低频分量,结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/gcf/gcf_modify.bmp"></p><p>从图像上看有分层，也许可以对GCF系数进行系数校正，近场调整的大一些</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超声扩散波复合成像仿真（ultrasound diverg_wave compound imaging simulation）</title>
    <link href="/2022/05/14/ultrasound-digver-wave/"/>
    <url>/2022/05/14/ultrasound-digver-wave/</url>
    
    <content type="html"><![CDATA[<h1 id="超声扩散波复合成像仿真（ultrasound-diverg-wave-compound-imaging-simulation）"><a href="#超声扩散波复合成像仿真（ultrasound-diverg-wave-compound-imaging-simulation）" class="headerlink" title="超声扩散波复合成像仿真（ultrasound diverg_wave compound imaging simulation）"></a>超声扩散波复合成像仿真（ultrasound diverg_wave compound imaging simulation）</h1><p>​        与传统超声聚焦成像相比，扩散波成像通过一次发射可以获取整个感兴趣区域图像信息，优势、劣势与平面波成像一样，与平面波成像不同之处在于扩散波通过虚拟一个发射源进行发射。</p><p>​        本文通过Filed II对线阵、凸阵、相控阵进行扩散波复合成像仿真，通过发射延时控制波阵面的形成，对于发射延时的计算可以看上节<a href="https://blog.csdn.net/h79847164/article/details/124286203">超声成像发射声场仿真（Ultrasound Emit Field Simulation）</a>。</p><p>​       本文仅对波束合成进行仿真，不涉及额外处理，如发射变迹、接收变迹等。</p><p>Field II仿真包含四个部分，</p><ol><li>参数配置</li><li>AD数据获取</li><li>波束合成</li><li>图像显示</li></ol><p>在线阵中会对上述部分进行说明，凸阵、相控阵设置流程一样</p><h2 id="一-线阵扩散波复合成像（diverg-wave-compound-of-linear-array）"><a href="#一-线阵扩散波复合成像（diverg-wave-compound-of-linear-array）" class="headerlink" title="一 线阵扩散波复合成像（diverg wave compound of linear array）"></a>一 线阵扩散波复合成像（diverg wave compound of linear array）</h2><p>​                                                                <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/linear.bmp" style="zoom:80%;" /></p><p>上图描绘了三个虚拟发射源位置，当定义了$r、\theta$虚拟发射源（红色点）的位置$(Virx,Virz)$就可以计算出来。发射源位置确定，发射延时即确定。</p><p>波束合成中的延时由上图中的两部分构成发射延时$Txdelay$和接收延时$Rvdelay$，在仿真过程中需要减去数据采样起始时间$stime$，在实际工程中$stime$可以代表波束合成参数准备时间、声束在透镜中传播时间、校正发射脉冲产生时间等，具体根据工程实现的方式去计算。对于延时时间最终转化为：<br>$$<br>delay &#x3D;Txdelay+Rvdelay-stime<br>$$<br>在Field II中$stime$由下面的函数返回</p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[scat, stime]</span> = calc_scat_multi (Th1, Th2, points, amplitudes); <br></code></pre></td></tr></table></figure><p>$Virx &#x3D; r*sin(-\theta)$</p><p>$Virz &#x3D; -r*cos(\theta)$</p><p>$Txdelay &#x3D;(sqrt((x_n-Virx)^2+(z_n-Virz)^2))&#x2F;c$</p><p>$Rvdelay &#x3D; (sqrt((x_n-x)^2+(z_n-z)^2))&#x2F;c$</p><p>$r &#x3D; 4cm$最终结果为</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/linear_diverging_wave_3.png"></p><p>$r &#x3D; 8 cm$最终结果为</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/linear_diverging_wave_3r8.png"></p><p>从图像上看$r$不同对于旁瓣有影响</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/linear_diverging_wave_15.png"></p><p>从仿真效果上看15个角度旁瓣少，主瓣窄，提高扩散波发射角度数量可以有效提升图像的分辨率和信噪比。</p><h2 id="二-凸阵扩散波复合成像（diverg-wave-compound-of-curve-array）"><a href="#二-凸阵扩散波复合成像（diverg-wave-compound-of-curve-array）" class="headerlink" title="二 凸阵扩散波复合成像（diverg wave compound of curve array）"></a>二 凸阵扩散波复合成像（diverg wave compound of curve array）</h2><p>​        仿真流程与线阵一样，不同地方在于发射延时计算方式与线阵不一样，波束合成中延时的距离计算需要由极坐标系转化为笛卡尔坐标系，坐标系转化后应该如下图：</p><p>​                                        <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavecurve_array_xy.bmp" style="zoom:67%;" />             </p><p>​       按照线阵的流程配置，最终结果为</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/curve_diverging_wave_3.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/curve_diverging_wave_15.png"></p><h2 id="三-相控阵扩散波复合成像（diverg-wave-compound-of-phase-array）"><a href="#三-相控阵扩散波复合成像（diverg-wave-compound-of-phase-array）" class="headerlink" title="三 相控阵扩散波复合成像（diverg wave compound of phase array）"></a>三 相控阵扩散波复合成像（diverg wave compound of phase array）</h2><p>相控阵发射设置与线阵完全一样，唯一不同的地方在于接收位置需要由极坐标转化为笛卡尔坐标系。坐标系转化后应该如下图：</p><p>​                                          <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavephase_array_xy.bmp" style="zoom:80%;" /></p><p>   按照线阵的流程配置，最终结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/phase_diverging_wave_3.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/digver_wave/phase_diverging_wave_15.png"></p><p>​         相控阵仿真效果相比平面波复合效果差，暂时没找到原因，&#x3D;&#x3D;插个眼&#x3D;&#x3D;，有知道的可以说一下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        通过Filed II仿真了线阵、凸阵、相控阵的扩散波束合成，从仿真结果上看与平面波一样，增加复合角度数目，可以有效提升图像的分辨率和信噪比。</p><p>​        感兴趣小伙伴的可以对比一下平面波与扩散波成像。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超声聚焦成像仿真（ultrasound fcous imaging simulation）</title>
    <link href="/2022/05/04/ultrasound-fcous-wave-imaging-simulation/"/>
    <url>/2022/05/04/ultrasound-fcous-wave-imaging-simulation/</url>
    
    <content type="html"><![CDATA[<h1 id="超声B-mode聚焦成像仿真（ultrasound-B-mode-fcous-imaging-simulation）"><a href="#超声B-mode聚焦成像仿真（ultrasound-B-mode-fcous-imaging-simulation）" class="headerlink" title="超声B mode聚焦成像仿真（ultrasound B  mode fcous imaging simulation）"></a>超声B mode聚焦成像仿真（ultrasound B  mode fcous imaging simulation）</h1><p>​        上篇文章<a href="https://blog.csdn.net/h79847164/article/details/124414103?spm=1001.2014.3001.5501">超声平面波复合成像仿真（ultrasound plane_wave compound imaging simulation）</a>使用Field II仿真了平面波成像，相比平面波成，聚焦成像像在焦区处分辨率、信噪比更强、通过聚焦穿透力也有提升，平面波发射一次获取整个深度信息，发射聚焦需要对每一条线上进行聚焦，然后做波束合成获取一条线上的信息，需要发射N次，帧率比平面波慢。</p><p>​        在仿真之前先介绍一下聚焦成像，通过对发射和接收的信号进行延时叠加求和（delay and sum ,DAS）可以达到聚焦成像的目的，聚焦成像中的波束合成包含两种模式，发射聚焦及接收聚焦。</p><p>​        理想上希望对每一个深度上的点进行发射聚焦即发射动态聚焦，由于声波传播需要时间，一副图像的形成包含N*M个点，需要上万次发射，无法实时成像，而实时成像又是我们超声成像（相比CT、MRI成像）最重要的优势，因此发射聚焦往往只在感兴趣区域进行1~3次，超过一个发射焦点就叫多焦点成像。对于有些厂家宣传的十几个以上的焦点只是为了满足招标要求去做的，临床上很少甚至不会使用。</p><p>​        根据互易定理，接收聚焦与发射聚焦的原理是一样的，都是通过对信号进行延时达到聚焦目的。对每一个深度上的点进行聚焦称为接收动态聚焦。如果只对一个感兴趣深度做接收聚焦就叫做接收定点聚焦，目前商业机器上使用的大多是接收动态聚焦。</p><p>​       下图是一副大家经常看到的波束合成的示意图</p><p>​                                                                           <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_waveDynamic-receive-beamforming-for-US-imaging.png">                           </p><p>​       从图上可以看出发射延时控制各阵元发出的波束同时到达聚焦点$(x,z)$，对接收到的回波信号通过计算接收延时进行接收聚焦，获取波束合成信号。</p><p>​        本文仿真的是定点发射聚焦，发射聚焦通过发射延时控制，当然也可以通过Field II自带函数去计算，感兴趣的话可以看下<a href="https://blog.csdn.net/h79847164/article/details/124286203">超声成像发射声场仿真（Ultrasound Emit Field Simulation）</a>，这篇文章介绍了通过控制发射延时形成不同成像模式的发射声场；对于动态接收聚焦可以通过Field II自带函数去计算，为了更深刻了解波束合成过程，这里使用仿真代码去实现。在此处的仿真中仅仿真正常发射图像，对于偏转仿真仅提供结果以验证结果是否正确，因为偏转图像需要另一种技术空间复合（<a href="https://www.sciencedirect.com/science/article/pii/S0887217101900186">spatial compound imaging</a>），这里不做过多介绍。</p><p>​      与平面波成像仿真一样， 本文仅对聚焦波束合成进行仿真，不涉及额外处理，如发射变迹、接收变迹等。仿真工具使用 Filed II，探头包括线阵、凸阵、相控阵。</p><p> Field II仿真包含四个部分，</p><ol><li>参数配置</li><li>AD数据获取</li><li>波束合成</li><li>图像显示</li></ol><p>在线阵中会通过代码对上述部分进行说明，凸阵、相控阵设置基本一样</p><h2 id="一-线阵聚焦成像（fcous-imaging-of-linear-array）"><a href="#一-线阵聚焦成像（fcous-imaging-of-linear-array）" class="headerlink" title="一 线阵聚焦成像（fcous imaging of linear array）"></a>一 线阵聚焦成像（fcous imaging of linear array）</h2><p>​                                                                                              <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavelinear_zhengchangfashe.bmp">                    </p><p>​                         </p><p>上图为线阵非偏转发射延时计算，波束合成中的延时由上图中的两部分构成发射延时$Txdelay$和接收延时$Rvdelay$，在仿真过程中需要减去数据采样起始时间$stime$，在实际工程中$stime$可以代表波束合成参数准备时间、声束在透镜中传播时间、校正发射脉冲产生时间等，具体根据工程实现的方式去计算。对于延时时间最终转化为：<br>$$<br>delay &#x3D;Txdelay+Rxdelay-stime<br>$$<br>在Field II中$stime$由下面的函数返回</p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[scat, stime]</span> = calc_scat_multi (Th, Rh, points, amplitudes); <br></code></pre></td></tr></table></figure><p>$$<br>Txdelay &#x3D; (sqrt((x_n-x_line)^2+(z_n-z_line^2))&#x2F;c &#x3D;  z_n&#x2F;c<br>$$</p><p>$$<br>Rxdelay &#x3D; (sqrt((x_n-x)^2+(z_n-z)^2))&#x2F;c<br>$$</p><p>上述即延时计算公式，$c$为声速，$(x_n,y_n)$为接收线位置，$(x,z)$为阵元坐标位置。</p><p>Field II仿真代码：</p><ol><li><p>参数设置</p></li><li><p>AD数据获取</p><p>这里对于每一条线的发射孔径固定为64，通道并没有全部使用，下图是每一条线对应的发射孔径，注意左右两侧</p><p>​                                                                                 <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_waveorbit_movie.gif">                  </p><p>下图是位于最左侧的线 64通道发射。128通道接收和64通道发射，32通道接收时获取到的的AD数据示意图，从图像可以看出通道打开的位置是正确的。</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavereceive_apo_data.bmp"></p></li><li><p>波束合成</p></li><li><p>图像显示</p></li></ol><p>结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavelinear_fcous_wave_middle.png"></p><p>这里附上偏转结果:</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavelinear_steer_snormal.bmp"></p><p>图像上边分别为-15, 0, 15偏转角度波束合成后图像，下侧为坐标系转换后结果，最后经过空间复合：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavelinear_fcous_wave_3.png"></p><p>从仿真效果上看靶点位置正确，3 cm 聚焦处比其他位置分辨率及信噪比更好，偏转图像经过空间复合后伪像减少。</p><h2 id="二-凸阵聚焦成像（fcous-imaging-of-curve-array）"><a href="#二-凸阵聚焦成像（fcous-imaging-of-curve-array）" class="headerlink" title="二 凸阵聚焦成像（fcous imaging of curve array）"></a>二 凸阵聚焦成像（fcous imaging of curve array）</h2><p>​        仿真流程与线阵一样，不同地方在于发射延时计算方式与线阵不一样，波束合成中延时的距离计算需要由极坐标系转化为笛卡尔坐标系，坐标系转化后应该如下图：</p><p>​                                                                                     <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavecurve_array_xy.bmp" style="zoom:67%;" />             </p><p>​        由于凸阵探头发射频率低，成像深度比线阵深，聚焦点位置放在 6 cm，仿真的靶点位置重新定义</p><p>​       按照线阵的流程配置，最终结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavecurve_fcous_wave_middle.png"></p><p>偏转图像空间复合后结果：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavecurve_fcous_wave_3.png"></p><h2 id="三-相控阵聚焦成像（fcous-imaging-of-phase-array）"><a href="#三-相控阵聚焦成像（fcous-imaging-of-phase-array）" class="headerlink" title="三 相控阵聚焦成像（fcous imaging of phase array）"></a>三 相控阵聚焦成像（fcous imaging of phase array）</h2><p>​           相控阵探头发射线永远位于中心线处，聚焦延时修改为</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">xdc_center_focus(Th,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br>xdc_focus(Th,<span class="hljs-number">0</span>,[fcous_x,<span class="hljs-number">0</span>,fcous_z]);<span class="hljs-comment">%  每条发射线聚焦处位置</span><br></code></pre></td></tr></table></figure><p>​        仿真流程与线阵一样，不同地方在于发射延时计算方式与线阵不一样，波束合成中延时的距离计算需要由极坐标系转化为笛卡尔坐标系，坐标系转化后应该如下图：</p><p>​                                                                <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavephase_array_xy.bmp"></p><p>  按照线阵的流程配置，最终结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavephase_fcous_wave.png"></p><p>相控阵一般是对心脏部位进行成像，帧率要求高，在聚焦成像中不会对相控阵进行空间复合。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        通过Filed II仿真了线阵、凸阵、相控阵的聚焦波束合成，有助于对聚焦成像有个深入的了解。对于超声机器中的偏转成像、线阵梯形成像、凸阵扩展成像都可以通过本文的方法进行相应扩展仿真。</p><p>​        上文仅针对接收动态聚焦做了仿真，对于定点接受聚焦只需要计算一次接受延时就可以确定一条线上所有点的位置。</p><p>​        目前商用机器中的聚焦波束合成方法不断发展，聚焦成像不仅能在焦区获取良好的分辨率，在焦区外也可以获得优异的图像，如西门子的<a href="https://www.usa.philips.com/healthcare/resources/feature-detail/nsight">nSIGHT</a>、迈瑞的<a href="https://resona7.com/technology.html">Dynamic Pixel Focusing</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超声平面波成像仿真（ultrasound plane_wave imaging simulation）</title>
    <link href="/2022/04/25/ultrasound-plane-wave-imaging-simulation/"/>
    <url>/2022/04/25/ultrasound-plane-wave-imaging-simulation/</url>
    
    <content type="html"><![CDATA[<h1 id="超声平面波复合成像仿真（ultrasound-plane-wave-compound-imaging-simulation）"><a href="#超声平面波复合成像仿真（ultrasound-plane-wave-compound-imaging-simulation）" class="headerlink" title="超声平面波复合成像仿真（ultrasound plane_wave compound imaging simulation）"></a>超声平面波复合成像仿真（ultrasound plane_wave compound imaging simulation）</h1><p>​        与传统超声聚焦成像相比，平面波成像通过一次发射可以获取整个感兴趣区域图像信息，帧率&gt;1000Hz以上，但由于无聚焦，图像对比度和分辨率降低。为了克服这一限制，可以通过发射N个不同角度的平面波，通过相干叠加得到完整图像，在一定的角度范围内，平面波数量越多，图像质量越好。</p><p>​                                            <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_waveplane_waveConventional-focused-and-ultrafast-ultrasound-imaging-sequences-for-a-typical-medical.png" style="zoom:50%;" />     </p><p>​ 图像来自<a href="https://pubmed.ncbi.nlm.nih.gov/24402899/">Ultrafast imaging in biomedical ultrasound</a></p><p>​    上图是传统聚焦成像与平面波复合成像示意图们可以明显看出平面波的优缺点。</p><p>​        本文通过Filed II对线阵和凸阵进行平面波复合成像仿真，通过发射延时控制平面波的形成，对于发射延时的计算可以看上节<a href="https://blog.csdn.net/h79847164/article/details/124286203">超声成像发射声场仿真（Ultrasound Emit Field Simulation）</a>。</p><p>​       本文仅对波束合成进行仿真，不涉及额外处理，如发射变迹、接收变迹等。</p><p>Field II仿真包含四个部分，</p><ol><li>参数配置</li><li>AD数据获取</li><li>波束合成</li><li>图像显示</li></ol><p>在线阵中会对上述部分进行说明，凸阵设置基本一样</p><h2 id="一-线阵平面波复合成像（plane-wave-compound-of-linear-array）"><a href="#一-线阵平面波复合成像（plane-wave-compound-of-linear-array）" class="headerlink" title="一 线阵平面波复合成像（plane-wave compound of linear array）"></a>一 线阵平面波复合成像（plane-wave compound of linear array）</h2><p>​                                                   <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavePlaneWave_Demo1.png" style="zoom:80%;"   />  </p><p>波束合成中的延时由上图中的两部分构成发射延时$Txdelay$和接收延时$Rvdelay$，在仿真过程中需要减去数据采样起始时间$stime$，在实际工程中$stime$可以代表波束合成参数准备时间、声束在透镜中传播时间、校正发射脉冲产生时间等，具体根据工程实现的方式去计算。对于延时时间最终转化为：<br>$$<br>delay &#x3D;Txdelay+Rvdelay-stime<br>$$<br>在Field II中$stime$由下面的函数返回</p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[scat, stime]</span> = calc_scat_multi (Th1, Th2, points, amplitudes); <br></code></pre></td></tr></table></figure><p>$$<br>Txdelay &#x3D; ((x_n<em>tan(\theta)+z_n)<em>cos(\theta) &#x3D; x_n</em>sin(\theta)+z_n</em>cos(\theta))&#x2F;c<br>$$</p><p>$$<br>Rvdelay &#x3D; (sqrt((x_n-x)^2+(z_n-z)^2))&#x2F;c<br>$$</p><p>上述即延时计算公式，$c$为声速，$(x_n,y_n)$为扫描区域位置，$(x,z)$为阵元坐标位置。</p><p>Field II仿真代码：</p><ol><li><p>参数设置</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear all<br>clc<br>close all<br>set(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;defaultfigurecolor&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>addpath(<span class="hljs-string">&#x27;../TransmitField&#x27;</span>);<br><br>wavetype = <span class="hljs-string">&#x27;plane_wave&#x27;</span> ;<span class="hljs-comment">%plane_wave \diverging_wave\fcous_wave</span><br><span class="hljs-comment">%初始化</span><br>field_init(<span class="hljs-number">0</span>)<br><span class="hljs-comment">%探头参数</span><br>probe.<span class="hljs-built_in">type</span> = <span class="hljs-string">&#x27;linear&#x27;</span>;<br>c = <span class="hljs-number">1540</span>;<br>ch =<span class="hljs-number">128</span>;<br><br>f0 = <span class="hljs-number">7500000</span>;<br>N_elements = <span class="hljs-number">128</span>;<br>width = <span class="hljs-number">0.17e-3</span>;<br>height = <span class="hljs-number">5e-3</span>;<br>kerf = <span class="hljs-number">0.03e-3</span>;<br>pitch = width+kerf;<br>focus = <span class="hljs-number">20e-3</span>;<br>fs = <span class="hljs-number">100e6</span>;                    <span class="hljs-comment">%不要设置太大</span><br>Th = xdc_linear_array (N_elements, width, height, kerf, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,focus]);<br>Rh = xdc_linear_array (N_elements, width, height, kerf, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,focus]);<br><br><span class="hljs-comment">%设置2个周期高斯脉冲相应、1个周期激励脉冲</span><br>dt  = <span class="hljs-number">1</span>/fs;<br>t0 = (<span class="hljs-number">-1</span>/f0): dt:(<span class="hljs-number">1</span>/f0);<br>impulse_response = gauspuls(t0, f0);<br>impulse_response = impulse_response-<span class="hljs-built_in">mean</span>(impulse_response);<br>pulse_duration = <span class="hljs-number">1</span>;<br>te = <span class="hljs-number">0</span>:dt:pulse_duration/f0;<br>excitation = square(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*f0*te);<br><span class="hljs-comment">%设置激励脉冲</span><br>xdc_excitation (Th, excitation);<br><span class="hljs-comment">%设置脉冲相应</span><br>xdc_impulse (Th, impulse_response);<br>xdc_impulse (Rh, impulse_response);<br><br><span class="hljs-comment">%阵元参数</span><br><br>x_ele = ([<span class="hljs-number">0</span>:N_elements<span class="hljs-number">-1</span>]-(N_elements<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>).*pitch;<br>z_ele  = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x_ele));<br>probe.N_elements = N_elements;<br>probe.pitch = pitch;<br><br><br><span class="hljs-comment">%发射偏转角度</span><br>steer_Num = <span class="hljs-number">15</span>;<br>steer_angle = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">-15</span>,<span class="hljs-number">15</span>,steer_Num);<br><span class="hljs-comment">%仿体设置</span><br>point_position(<span class="hljs-number">1</span>,:) = [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10e-3</span>];<br>point_position(<span class="hljs-number">2</span>,:) = [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">30e-3</span>];<br>point_position(<span class="hljs-number">3</span>,:) = [<span class="hljs-number">-5e-3</span> <span class="hljs-number">0</span> <span class="hljs-number">30e-3</span>];<br>point_position(<span class="hljs-number">4</span>,:) = [<span class="hljs-number">5e-3</span> <span class="hljs-number">0</span> <span class="hljs-number">30e-3</span>];<br>point_position(<span class="hljs-number">5</span>,:) = [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">40e-3</span>];<br>point_amplitudes = <span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(point_position,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>AD数据获取</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 获取AD数据</span><br>ADInfo.data =<span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">2</span>*<span class="hljs-number">60e-3</span>/c/dt),N_elements,steer_Num);  <br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:steer_Num<br>    <span class="hljs-comment">%实际工程中发射变迹通过发射波形去控制，以后再实施，这里不做发射变迹</span><br>    xdc_apodization(Th,<span class="hljs-number">0</span>,<span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>,N_elements));<br>    <span class="hljs-comment">%设置偏转发射延时</span><br>    xdc_center_focus(Th,[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]);<br>    emit_delay = plane_wave_tranmit_delay(probe,steer_angle(<span class="hljs-built_in">i</span>)*<span class="hljs-built_in">pi</span>/<span class="hljs-number">180</span>,c);<br>    xdc_times_focus(Th,<span class="hljs-number">0</span>,emit_delay);<br>    <span class="hljs-comment">%接收变迹-使用矩形窗不做变迹</span><br>    xdc_apodization(Rh,<span class="hljs-number">0</span>,<span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>,N_elements));<br>    <span class="hljs-comment">%接收不聚焦</span><br>    xdc_center_focus(Rh,[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]);<br>    xdc_focus_times(Rh,<span class="hljs-number">0</span>,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N_elements))<br>    <span class="hljs-comment">%获取AD数据</span><br>    [v,t]=calc_scat_multi(Th, Rh, point_position, point_amplitudes);<br>    ADInfo.data(<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(v,<span class="hljs-number">1</span>),:,<span class="hljs-built_in">i</span>)=v;<br>    ADInfo.time(<span class="hljs-built_in">i</span>) = t;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li><li><p>波束合成</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs matlab">interp =<span class="hljs-number">0</span>;<span class="hljs-comment">%是否插值</span><br>[pt,line,steer_Num] = <span class="hljs-built_in">size</span>(ADInfo.data);<br><span class="hljs-comment">%图像成像区域</span><br>x = interp1(<span class="hljs-number">1</span>:line,x_ele,<span class="hljs-built_in">linspace</span>(<span class="hljs-number">1</span>,line,line*<span class="hljs-number">2</span>));<br>z = [<span class="hljs-number">0</span>:pt<span class="hljs-number">-1</span>]*(c/fs/<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% x = interp1(1:line,x_ele,linspace(1,line,line*2));</span><br><span class="hljs-comment">% z = linspace(5e-3,60e-3,256);</span><br><br>[x,z] = <span class="hljs-built_in">meshgrid</span>(x,z);<br>scan_x = x(:);<br>scan_z = z(:);<br><span class="hljs-comment">%接收动态聚焦</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:steer_Num<br>    <span class="hljs-comment">%选取数据</span><br>    data = ADInfo.data(:,:,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-comment">%数据插值</span><br>    steer = steer_angle(<span class="hljs-built_in">i</span>)*<span class="hljs-built_in">pi</span>/<span class="hljs-number">180</span>;<br>    <span class="hljs-comment">%发射距离，扫描区域点的位置相对于发射位置的距离</span><br>    t_dis = scan_x*<span class="hljs-built_in">sin</span>(steer)+scan_z*<span class="hljs-built_in">cos</span>(steer);<br>    <span class="hljs-comment">%接收距离，扫描区域点的位置相对于阵元坐标距离</span><br>    r_dis = <span class="hljs-built_in">sqrt</span>((scan_x-x_ele).^<span class="hljs-number">2</span>+(scan_z(:)-z_ele).^<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">%延时</span><br>    delay  = (t_dis+r_dis)/c-ADInfo.time(<span class="hljs-built_in">i</span>);<br>    <span class="hljs-comment">%是否插值，延时转化为点</span><br> <br>    <span class="hljs-keyword">if</span> ~interp<br>        pt_loc  = <span class="hljs-built_in">round</span>(delay*fs);<br>        pt_loc(pt_loc&lt;<span class="hljs-number">1</span>) = <span class="hljs-number">1</span>;<br>        pt_loc(pt_loc&gt;pt) = pt;<br>        pt_loc = pt_loc+[<span class="hljs-number">0</span>:N_elements<span class="hljs-number">-1</span>]*pt;<br>    <br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> =<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(pt_loc)<br>            <br>            loc = pt_loc(<span class="hljs-built_in">j</span>,:);<br>            RF(<span class="hljs-built_in">j</span>,<span class="hljs-built_in">i</span>) =  sum(data(loc));<br>           <br>        <span class="hljs-keyword">end</span><br>        <br>    <span class="hljs-keyword">else</span><br>        RF(:,<span class="hljs-built_in">i</span>) =  data_interp(data,delay,fs,downsampleM,[<span class="hljs-built_in">size</span>(x,<span class="hljs-number">1</span>),<span class="hljs-built_in">size</span>(x,<span class="hljs-number">2</span>)]);<br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%相干复合</span><br>RFdata =  <span class="hljs-built_in">reshape</span>(sum(RF,<span class="hljs-number">2</span>),[<span class="hljs-built_in">size</span>(x,<span class="hljs-number">1</span>),<span class="hljs-built_in">size</span>(x,<span class="hljs-number">2</span>)]);<br></code></pre></td></tr></table></figure></li><li><p>图像显示</p></li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">envelope = <span class="hljs-built_in">abs</span>(hilbert(RFdata));<br>envelope = db(envelope./<span class="hljs-built_in">max</span>(envelope(:)));<br><span class="hljs-built_in">figure</span>;<br>imagesc(<span class="hljs-built_in">figure</span>);<br>colormap gray<br>caxis(axis_handle,[<span class="hljs-number">-60</span> <span class="hljs-number">0</span>]);<br><br></code></pre></td></tr></table></figure><p>结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavelinear_plane_wave_3.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavelinear_plane_wave_15.png"></p><p>从仿真效果上看15个角度旁瓣少，主瓣窄，提高平面波发射角度数量可以有效提升图像的分辨率和信噪比。</p><h2 id="二-凸阵平面波复合成像（plane-wave-compound-of-curve-array）"><a href="#二-凸阵平面波复合成像（plane-wave-compound-of-curve-array）" class="headerlink" title="二 凸阵平面波复合成像（plane-wave compound of curve array）"></a>二 凸阵平面波复合成像（plane-wave compound of curve array）</h2><p>​        仿真流程与线阵一样，不同地方在于发射延时计算方式与线阵不一样，波束合成中延时的距离计算需要由极坐标系转化为笛卡尔坐标系，坐标系转化后应该如下图：</p><p>​                                                                                       <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavecurve_array_xy.bmp" style="zoom:67%;" />             </p><p>​       按照线阵的流程配置，最终结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavecurve_plane_wave_3.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavecurve_plane_wave_15.png"></p><p>明显可以看出15个角度的图像质量更好。</p><h2 id="三-相控阵平面波复合成像（plane-wave-compound-of-phase-array）"><a href="#三-相控阵平面波复合成像（plane-wave-compound-of-phase-array）" class="headerlink" title="三 相控阵平面波复合成像（plane-wave compound of phase array）"></a>三 相控阵平面波复合成像（plane-wave compound of phase array）</h2><p>相控阵发射设置与线阵完全一样，唯一不同的地方在于接收位置需要由极坐标转化为笛卡尔坐标系。坐标系转化后应该如下图：</p><p>​                                                                         <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavephase_array_xy.bmp" style="zoom:80%;" /></p><p>   按照线阵的流程配置，最终结果为：</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavephase_plane_wave_3.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_beamform/plane_wavephase_plane_wave_45.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        通过Filed II仿真了线阵、凸阵、相控阵的平面波波束合成，从仿真结果上印证了增加复合角度数目，可以有效提升图像的分辨率和信噪比。</p><p>​        在波束合成过程中如果假如发射、接收变迹，图像的质量可以进一步提升，变迹会在后续讨论，感兴趣小伙伴的可以尝试一下</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超声成像发射声场仿真（Ultrasound Emit Field Simulation）</title>
    <link href="/2022/04/16/Ultrasoun-Emit-Delay/"/>
    <url>/2022/04/16/Ultrasoun-Emit-Delay/</url>
    
    <content type="html"><![CDATA[<h1 id="超声成像发射声场仿真（Ultrasound-Emit-Field-Simulation）"><a href="#超声成像发射声场仿真（Ultrasound-Emit-Field-Simulation）" class="headerlink" title="超声成像发射声场仿真（Ultrasound Emit Field Simulation）"></a>超声成像发射声场仿真（Ultrasound Emit Field Simulation）</h1><p>​       根据超声波阵面的实现方式可以将超声成像分为平面波（plane wave）成像、扩散波（diverging wave）成像、聚焦（focus）成像。为了实现上述成像方式需要施加不同的发射延时形成相应的波阵面。不同的波阵面形成的发射声场表现不同，了解不同成像方式的声场有助于我们加深超声成像的了解。</p><p>​       此处以Field II软件仿真不同成像方式发射声场。发射延时可以使用Filed II自带函数生成，由于实际工程需要发射延时是由工程师去计算配置的，下文列出了发射延时的计算方式。</p><p>​       Field_II是丹麦超声专家J. A. Jensen等利用声学原理设计的一个超声系统。它可以仿真超声探头所形成的声场和超声图像等。这里默认已经对Filed _II有一定了解。</p><h2 id="一、平面波发射声场"><a href="#一、平面波发射声场" class="headerlink" title="一、平面波发射声场"></a>一、平面波发射声场</h2><h3 id="1、线阵探头-x2F-相控阵探头"><a href="#1、线阵探头-x2F-相控阵探头" class="headerlink" title="1、线阵探头&#x2F;相控阵探头"></a>1、线阵探头&#x2F;相控阵探头</h3><p>​                                             <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/plane_wave.png" style="zoom:50%;" /> </p><p>​          </p><p>​    上图是线阵&#x2F;相控阵平面波正常发射和偏转发射的示意图，对于平面波没有聚焦的概念，因此只要使激励阵元的延时形成平面波就可以。</p><p>​    对于正常发射各阵元发射延时全为0，对于偏转发射（包括正常发射）延时计算为：<br>$$<br>x⋅sin(v)<br>$$<br>​    角度为负往左偏转，角度为正往右偏转，对于以后的扫描偏转方向沿用这一规则。</p><p>​当计算完成发射延时，就可以进行声场仿真。</p><p>​首先需要对配置探头参数进行配置，参数如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs matlab">clear all<br>close all<br>clc<br>plt = <span class="hljs-number">1</span>;<span class="hljs-comment">%是否绘制</span><br>f0 = <span class="hljs-number">7500000</span>;<br>N_elements = <span class="hljs-number">128</span>;<br>width = <span class="hljs-number">0.17e-3</span>;<br>height = <span class="hljs-number">5e-3</span>;<br>kerf = <span class="hljs-number">0.03e-3</span>;<br>focus = <span class="hljs-number">20e-3</span>;<br>fs = <span class="hljs-number">200e6</span>;<br>Th = xdc_linear_array (N_elements, width, height, kerf, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,focus]);<br>Rh = xdc_linear_array (N_elements, width, height, kerf, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,focus]);<br><span class="hljs-keyword">if</span> plt<br>probeplt(Th);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>​                                           <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/line_probe.png" style="zoom:80%;" />  </p><p>​设置脉冲相应、阵元位置及平面波发射角度</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%设置2个周期高斯脉冲相应、1个周期激励脉冲</span><br>dt  = <span class="hljs-number">1</span>/fs;<br>t0 = (<span class="hljs-number">-1</span>/f0): dt:(<span class="hljs-number">1</span>/f0);<br>impulse_response = gauspuls(t0, f0);<br>impulse_response = impulse_response-<span class="hljs-built_in">mean</span>(impulse_response);<br>pulse_duration = <span class="hljs-number">1</span>;<br>te = <span class="hljs-number">0</span>:dt:pulse_duration/f0;<br>excitation = square(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*f0*te);<br><span class="hljs-comment">%设置脉冲相应</span><br>xdc_impulse (Th, impulse_response);<br>xdc_impulse (Rh, impulse_response);<br><span class="hljs-comment">%设置激励脉冲</span><br>xdc_excitation (Th, excitation);<br><span class="hljs-comment">%发射角度</span><br>steer_angle = [<span class="hljs-number">-15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>];<br><span class="hljs-comment">%阵元位置</span><br><span class="hljs-keyword">if</span> strcmp(probetype,<span class="hljs-string">&#x27;linear&#x27;</span>)<br>    x_ele = ([<span class="hljs-number">0</span>:N_elements<span class="hljs-number">-1</span>]-(N_elements<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>).*pitch;<br>    probe_xyz = [x_ele&#x27;,<span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">length</span>(x_ele),<span class="hljs-number">1</span>),<span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">length</span>(x_ele),<span class="hljs-number">1</span>)];<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>​                                           <img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/impulse_response.png" style="zoom:80%;" /> </p><p>计算发射声场</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%设置发射声场显示区域</span><br>x = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">-2e-2</span>,<span class="hljs-number">2e-2</span>,<span class="hljs-number">128</span>);<br>z = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4e-2</span>,<span class="hljs-number">256</span>);<br><br>emit_field = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">256</span>,<span class="hljs-number">128</span>,<span class="hljs-built_in">length</span>(steer_angle));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(steer_angle)<br>    <span class="hljs-comment">%实际工程中发射变迹通过发射波形去控制，以后再实施，这里不做发射变迹</span><br>    xdc_apodization(Th,<span class="hljs-number">0</span>,<span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>,N_elements));<br>    <span class="hljs-comment">%设置平面波发射延时</span><br>    delay(<span class="hljs-built_in">i</span>,:) = plane_wave_tranmit_delay(probe_xyz,steer_angle(<span class="hljs-built_in">i</span>)*<span class="hljs-built_in">pi</span>/<span class="hljs-number">180</span>,c,probetype);<br>    xdc_times_focus(Th,<span class="hljs-number">0</span>,delay(<span class="hljs-built_in">i</span>,:));<br>    <span class="hljs-comment">%计算发射声场</span><br>    emit_field(:,:,<span class="hljs-built_in">i</span>) = emit_field_calc(Th,x,z);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>无偏转平面波延时设置也可以通过下面进行</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">xdc_center_focus(Th,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br>xdc_focus(Th,<span class="hljs-number">0</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p>发射声场field II计算函数</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">[xi,zi] = meshgrid(x,z);<br>xi = xi<span class="hljs-comment">(:);</span><br><span class="hljs-comment">zi = zi(:)</span>;<br>emit_field = calc_hp(Th,[xi,zeros(length(xi),<span class="hljs-number">1</span>),zi]);<br></code></pre></td></tr></table></figure><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/linear_emit_field.png"></p><p>从上图可以看出发射延时有负数，实际工程中会给一个t进行补偿，保证延时大于0。</p><h3 id="2、凸阵"><a href="#2、凸阵" class="headerlink" title="2、凸阵"></a>2、凸阵</h3><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/curve_array.png"></p><p>​上图是线阵&#x2F;相控阵平面波正常发射和偏转发射的示意图</p><p>​     对于正常发射各阵元发射延时全为0，对于偏转发射（包括正常发射）延时计算为：<br>$$<br>R⋅cos(\theta_p-\theta_e)<br>$$<br>​$\theta_p$为平面波偏转角度，$\theta_e$为阵元相对中间线的夹角</p><p>​    另一种计算发射延时方法是计算定点到阵元$n$波阵面(与波阵面垂直)的切线，通过切线可以计算出阵元到波阵面的距离，然后转化为发射延时。</p><p>​代码框架与上面一致，结果为</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/curve_emit_field.png"></p><h2 id="二、扩散波发射声场"><a href="#二、扩散波发射声场" class="headerlink" title="二、扩散波发射声场"></a>二、扩散波发射声场</h2><p>扩散波与平面波都可以通过一次发射获取较大的图像视野，与平面波不同的是扩散波虚拟了一个点源</p><h3 id="1、线阵探头-x2F-相控阵探头-1"><a href="#1、线阵探头-x2F-相控阵探头-1" class="headerlink" title="1、线阵探头&#x2F;相控阵探头"></a>1、线阵探头&#x2F;相控阵探头</h3><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/linear_div.PNG"></p><p>此处定义虚拟源的半径为$r$，偏转角度为$\theta$   ，虚拟源位置通过三角函数计算，各阵元到虚拟源的距离也确定了。</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/linear_diverging_wave_emit_field.png"></p><h3 id="2、凸阵-1"><a href="#2、凸阵-1" class="headerlink" title="2、凸阵"></a>2、凸阵</h3><p>凸阵原理与线阵类似</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/curve_diverging_wave_emit_field.png"></p><h2 id="三、聚焦波发射声场"><a href="#三、聚焦波发射声场" class="headerlink" title="三、聚焦波发射声场"></a>三、聚焦波发射声场</h2><h3 id="1、线阵探头"><a href="#1、线阵探头" class="headerlink" title="1、线阵探头"></a>1、线阵探头</h3><p>聚焦声场的延时使用Field II 自带函数计算，聚焦深度3cm，发射线为中心线，发射延时计算</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">xdc_center_focus(Th,[fcous_x,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br>xdc_focus(Th,<span class="hljs-number">0</span>,[fcous_x,<span class="hljs-number">0</span>,fcous_z]);<br></code></pre></td></tr></table></figure><p>或是通过自行计算的延时导入Filed II</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">delay = fcous<span class="hljs-constructor">_wave_tranmit_delay(<span class="hljs-params">probe</span>,<span class="hljs-params">loc_x</span>,<span class="hljs-params">fcous_depth</span>,<span class="hljs-params">steer_angle</span><span class="hljs-operator">*</span><span class="hljs-params">pi</span><span class="hljs-operator">/</span>180,<span class="hljs-params">c</span>)</span>;<br>xdc<span class="hljs-constructor">_times_focus(Th,0,<span class="hljs-params">delay</span>)</span>;<br></code></pre></td></tr></table></figure><p>偏转-15自行计算与Fileld II延时对比,符合预期</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/fcous.png"></p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/linear_fcous_wave_emit_field.png"></p><h3 id="2、凸阵探头"><a href="#2、凸阵探头" class="headerlink" title="2、凸阵探头"></a>2、凸阵探头</h3><p>代码框架与上面一样，发射线为中心线，聚焦深度4cm，结果为</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/curve_fcous_wave_emit_field.png"></p><h3 id="3、相控阵探头"><a href="#3、相控阵探头" class="headerlink" title="3、相控阵探头"></a>3、相控阵探头</h3><p>相控阵探头发射线永远位于中心线处，聚焦延时修改为</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">xdc_center_focus(Th,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br>xdc_focus(Th,<span class="hljs-number">0</span>,[fcous_x,<span class="hljs-number">0</span>,fcous_z]);<br></code></pre></td></tr></table></figure><p>发射线为中心处，角度为[-30,0,30]，聚焦深度6cm，结果为</p><p><img src="https://harris.oss-cn-shanghai.aliyuncs.com/img/Ultrasound_Emit_Field/phase_fcous_wave_emit_field.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>设置不同的发射延时，可以实现不同的成像方式，同时将自己计算的发射延时与Field II做对比有助于验证发射延时的正确性。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
